# handlers/user/anime_search.py

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
from telegram.constants import ParseMode

from database.db_manager import find_anime_by_name, find_anime_by_code, get_all_animes_paginated, get_top_viewed_animes, get_user_role
from keyboards.user_keyboards import get_anime_search_keyboard, get_back_keyboard, get_main_menu_keyboard
from config import ADMIN_IDS

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# ConversationHandler –∫“Ø–π–ª–µ—Ä—ñ
SEARCH_BY_NAME, SEARCH_BY_CODE, SEARCH_VIA_ADMIN = range(3)

# --- –ù–µ–≥—ñ–∑–≥—ñ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---

async def to_anime_search_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """'üé¨ Anime Izlash' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å“õ–∞–Ω–¥–∞ –æ—Å—ã —Ñ—É–Ω–∫—Ü–∏—è —ñ—Å–∫–µ “õ–æ—Å—ã–ª–∞–¥—ã."""
    await update.message.reply_text(
        "üé¨ Anime izlash bo'limi. Kerakli buyruqni tanlang:",
        reply_markup=get_anime_search_keyboard()
    )

async def back_to_main_menu_from_convo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–∏–∞–ª–æ–≥ —ñ—à—ñ–Ω–µ–Ω –Ω–µ–≥—ñ–∑–≥—ñ –º–µ–Ω—é–≥–µ –æ—Ä–∞–ª—É."""
    await update.message.reply_text(
        "Asosiy menyuga qaytdingiz.",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END

async def back_to_main_menu_from_regular(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """“ö–∞—Ä–∞–ø–∞–π—ã–º –º–µ–Ω—é–¥–µ–Ω –Ω–µ–≥—ñ–∑–≥—ñ –º–µ–Ω—é–≥–µ –æ—Ä–∞–ª—É."""
    await update.message.reply_text(
        "Asosiy menyuga qaytdingiz.",
        reply_markup=get_main_menu_keyboard()
    )

# --- –ê—Ç—ã –±–æ–π—ã–Ω—à–∞ —ñ–∑–¥–µ—É ---

async def search_by_name_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("Izlash uchun anime nomini yozing:", reply_markup=get_back_keyboard())
    return SEARCH_BY_NAME

async def search_by_name_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    anime_name = update.message.text
    anime = find_anime_by_name(anime_name)
    
    if anime:
        response = f"‚úÖ Topildi!\n\nüé¨ *Nomi:* {anime['name']}\nüî¢ *Kodi:* `{anime['code']}`\nüìÑ *Tavsif:* {anime['description'] or 'Mavjud emas'}"
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_anime_search_keyboard())
    else:
        await update.message.reply_text("‚ùå Afsus, bunday nomdagi anime topilmadi.", reply_markup=get_anime_search_keyboard())
        
    return ConversationHandler.END

# --- –ö–æ–¥—ã –±–æ–π—ã–Ω—à–∞ —ñ–∑–¥–µ—É ---

async def search_by_code_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("Izlash uchun anime kodini yozing (Masalan: A001):", reply_markup=get_back_keyboard())
    return SEARCH_BY_CODE

async def search_by_code_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    anime_code = update.message.text
    anime = find_anime_by_code(anime_code)
        
    if anime:
        response = f"‚úÖ Topildi!\n\nüé¨ *Nomi:* {anime['name']}\nüî¢ *Kodi:* `{anime['code']}`\nüìÑ *Tavsif:* {anime['description'] or 'Mavjud emas'}"
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_anime_search_keyboard())
    else:
        await update.message.reply_text("‚ùå Afsus, bunday kodli anime topilmadi.", reply_markup=get_anime_search_keyboard())

    return ConversationHandler.END

# --- “ö–∞–ª“ì–∞–Ω —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä ---

async def all_animes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    role = get_user_role(update.effective_user.id)
    if role not in ['vip', 'admin']:
        await update.message.reply_text("Bu bo'lim faqat VIP a'zo yoki Adminlar uchun.")
        return
    # TODO: –ë–µ—Ç—Ç–µ—É (–ø–∞–≥–∏–Ω–∞—Ü–∏—è) –ª–æ–≥–∏–∫–∞—Å—ã–Ω –æ—Å—ã–Ω–¥–∞ “õ–æ—Å—É –∫–µ—Ä–µ–∫

async def top_animes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    role = get_user_role(update.effective_user.id)
    if role not in ['vip', 'admin']:
        await update.message.reply_text("Bu bo'lim faqat VIP a'zo yoki Adminlar uchun.")
        return
    # TODO: –ï“£ –∫”©–ø –∫”©—Ä—ñ–ª–≥–µ–Ω–¥–µ—Ä–¥—ñ –î–ë-–¥–∞–Ω –∞–ª—É –ª–æ–≥–∏–∫–∞—Å—ã

async def search_via_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
     # TODO: –ê–¥–º–∏–Ω –∞—Ä“õ—ã–ª—ã —ñ–∑–¥–µ—É –¥–∏–∞–ª–æ–≥—ã
    await update.message.reply_text("Bu funksiya tez orada ishga tushadi.")


# --- Conversation Handler-–¥—ñ –¥“±—Ä—ã—Å “õ“±—Ä—É ---
anime_search_conv_handler = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("^üìù Nomi orquali izlash$"), search_by_name_start),
        MessageHandler(filters.Regex("^üî¢ Kod orquali izlash$"), search_by_code_start),
    ],
    states={
        SEARCH_BY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^‚¨ÖÔ∏è Orqaga$"), search_by_name_receive)],
        SEARCH_BY_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^‚¨ÖÔ∏è Orqaga$"), search_by_code_receive)],
    },
    fallbacks=[MessageHandler(filters.Regex("^‚¨ÖÔ∏è Orqaga$"), back_to_main_menu_from_convo)],
)

